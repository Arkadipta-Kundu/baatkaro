# ================================================================================
# CHAT APPLICATION CONFIGURATION
# ================================================================================
# 
# This file contains all configuration properties for the Real-Time Chat Application
# 
# Configuration Categories:
# 1. Application Settings - Basic app configuration and server settings
# 2. Database Configuration - PostgreSQL connection and JPA settings
# 3. Redis Configuration - Cache and pub-sub messaging configuration  
# 4. JWT Security Configuration - Token generation and validation settings
# 5. WebSocket Configuration - Real-time messaging settings
# 6. Documentation Configuration - Swagger/OpenAPI settings
# 
# Environment-Specific Configuration:
# - Development: Use localhost services with default ports
# - Production: Override with environment variables for security
# - Testing: Use separate test databases and configurations
# 
# Security Notes:
# - Never commit production passwords to version control
# - Use environment variables for sensitive configuration in production
# - JWT secret should be at least 256 bits (32 characters) for HS256
# - Database credentials should use least-privilege principle
# 
# Performance Notes:
# - JPA ddl-auto should be 'validate' or 'none' in production
# - Redis timeout and pool settings affect response times
# - JWT expiration affects security vs user experience balance
# 
# For production deployment:
# - Set spring.profiles.active=prod
# - Override sensitive properties with environment variables
# - Use external configuration management (Spring Cloud Config, etc.)
# ================================================================================

# ===== APPLICATION SETTINGS =====
# Basic application identification and server configuration
spring.application.name=chatapp
server.port=8080

# ===== DATABASE CONFIGURATION =====
# PostgreSQL database connection settings
# Production: Override with environment variables for security
spring.datasource.url=jdbc:postgresql://localhost:5432/chatapp_db
spring.datasource.username=chatapp_user
spring.datasource.password=chatapp_password
spring.datasource.driver-class-name=org.postgresql.Driver

# ===== JPA/HIBERNATE CONFIGURATION =====
# Object-Relational Mapping and database interaction settings
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# DDL mode: 'update' for development, 'validate' for production
spring.jpa.hibernate.ddl-auto=update
# SQL logging: helpful for development, disable in production for performance
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# ===== KAFKA CONFIGURATION =====
# Message broker configuration for scalable event-driven architecture
# Note: Currently using Redis pub-sub, Kafka config for future scalability
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=chatapp-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# ===== REDIS CONFIGURATION =====
# In-memory data store for caching and pub-sub messaging
# Used for: session storage, real-time message broadcasting, caching
spring.data.redis.host=localhost
spring.data.redis.port=6379
# Connection timeout in milliseconds
spring.data.redis.timeout=60000

# ===== JWT SECURITY CONFIGURATION (Custom Properties) =====
# JSON Web Token settings for stateless authentication
# Secret key for token signing - MUST be at least 256 bits for HS256
app.jwt.secret=YourSuperSecretJWTKeyThatShouldBeAtLeast256BitsLongForHS256Algorithm
# Access token expiration: 86400000ms = 24 hours
app.jwt.expiration=86400000
# Refresh token expiration: 604800000ms = 7 days
app.jwt.refresh-expiration=604800000

# ===== WEBSOCKET CONFIGURATION (Custom Properties) =====
# Real-time messaging configuration
# Allowed origins for WebSocket connections (CORS for WebSocket)
app.websocket.allowed-origins=http://localhost:3000,http://localhost:8080

# ===== API DOCUMENTATION CONFIGURATION =====
# Swagger/OpenAPI documentation settings
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# ===== LOGGING CONFIGURATION =====
# Development logging levels - adjust for production
logging.level.org.arkadipta.chatapp=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web.socket=DEBUG
