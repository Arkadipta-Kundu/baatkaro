version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatapp-postgres
    environment:
      POSTGRES_DB: chatapp
      POSTGRES_USER: chatapp_user
      POSTGRES_PASSWORD: chatapp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatapp_user -d chatapp"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chatapp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatapp-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chatapp-network

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatapp-api
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/chatapp
      SPRING_DATASOURCE_USERNAME: chatapp_user
      SPRING_DATASOURCE_PASSWORD: chatapp_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

      # JWT Configuration
      APP_JWT_SECRET: YourSuperSecretJWTKeyThatShouldBeAtLeast256BitsLongForHS256Algorithm
      APP_JWT_EXPIRATION: 86400000
      APP_JWT_REFRESH_EXPIRATION: 604800000

      # WebSocket Configuration
      APP_WEBSOCKET_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080

      # Spring Profile
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - chatapp-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chatapp-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@chatapp.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - chatapp-network
    profiles:
      - admin

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: chatapp-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - chatapp-network
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  chatapp-network:
    driver: bridge
